# Functions converted from fish config

# Create directory and change into it
mkcd() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: mkcd DIRECTORY"
        return 1
    fi
    mkdir "$1" && cd "$1"
}

# Check if directory exists
check_dir_exists() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: check_dir_exists DIRECTORY"
        return 1
    fi
    [ -d "$1" ] && echo "Le r√©pertoire existe"
}

# Connect to ETNA VM
connect_vm_etna() {
    if [ "$#" -eq 0 ]; then
        echo "Usage: connect_vm_etna <username>"
        return 1
    fi

    username="$1"

    xfreerdp /v:172.16.227.4 /u:"$username" /smart-sizing
}

# Connect to RDP
connect_rdp() {
    if [ "$#" -eq 0 ]; then
        echo "Usage: connect_rdp <ip_address> <username>"
        return 1
    fi

    ip="$1"
    username="$2"

    xfreerdp /v:"$ip" /u:"$username" /smart-sizing
}

# System commands
alias install_package='sudo apt install'
alias up-os='sudo apt upgrade'
alias sdown='shutdown -h now'
alias search='sudo apt search'
alias update='sudo apt upgrade'
alias uninstall='sudo apt uninstall'
alias search_proc='ps -ef | grep'

# Editing config files
alias conf_alacritty='nano ~/.config/alacritty.sh'
alias edit_fish='code ~/.config/fish/config.fish'
alias edit_sshconfig='code ~/.ssh/config'
alias edit_vhosts='code /etc/httpd/conf/extra/httpd-vhosts.conf'
alias show_vhosts='sudo cat /etc/httpd/conf/extra/httpd-vhosts.conf'

# Docker containers
alias stop_all_containers='docker stop $(docker ps -aq)'
alias remove_all_containers='docker rm $(docker ps -aq)'

# Systemctl commands
alias restart_service='systemctl restart'
alias enable_service='systemctl enable'
alias reload_service='systemctl reload'
alias start_service='systemctl start'
alias stop_service='systemctl stop'
alias status_service='systemctl status'

alias exercism='~/bin/exercism'

# Git
alias gcl='git clone'
alias ga='git add'
alias gf='git fetch'
alias gpu='git pull'
alias gp='git push'
alias gs='git status'
alias gc='git commit -m'
alias gch='git checkout'

# Utils
alias lsla='ls -la'
alias lsl='ls -l'
alias grep='grep --color=auto'
alias du='du -h'
alias untar='tar -xvzf '
# VPN config
alias import_ovpnconfig='cd /etc/openvpn && nmcli connection import type openvpn file'
alias connect_pc_jeu='xfreerdp /v:192.168.1.173 /u:gabriel /smart-sizing'
alias copy_config_fish='sudo cp /home/gab/.config/fish/config.fish /root/.config/fish/config.fish'

# Environment Variables
export httpd="/etc/httpd/conf"
export config="$HOME/.config"
export etna_project="/srv/http/etna"
export php_dir="/etc/php"
export web="/var/www/html"
export openvpn="/etc/openvpn"
export scripts_vpn="/etc/openvpn"
export japonais="/srv/samba/share/DOCUMENTS/Japonais/Coline"

# Source the file to apply changes in current session
# source ~/.bashrc

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
source ~/.ghcup/env

# Go path configuration
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin

# Rust path configuration
export PATH=$PATH:$HOME/.cargo/bin

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
. "$HOME/.cargo/env"
